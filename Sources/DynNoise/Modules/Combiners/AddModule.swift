//
//  AddModule.swift
//
//  A module that combines the values provided by two other modules via addition.
//
//  Carson Rau - 6/14/23
//

/// A combiner module that adds the values provided by two other modules.
public struct AddModule<T: Module, U: Module>: Combine2Module {
    /// Storage for the modules being combined in this module.
    public let baseModule: (T, U)
    /// Construct a new `AddModule` by providing its base modules.
    /// - Parameters:
    ///   - first: The first module to add.
    ///   - second: The second module to add.
    public init(first: T, second: U) {
        baseModule = (first, second)
    }
    /// Compute a new value by adding the values given by both source modules.
    /// - Parameters:
    ///   - x: The x-coordinate of the desired value.
    ///   - y: The y-coordinate of the desired value.
    ///   - z: The z-coordinate of the desired value.
    /// - Returns: A double generated by adding the values received by the base modules.
    public func getValue(x: Double, y: Double, z: Double) throws -> Double {
        try baseModule.0[x, y, z] + baseModule.1[x, y, z]
    }
}

extension Module {
    /// Construct a module that adds this module and another module together.
    ///
    /// - Parameter lhs: The module to add.
    /// - Returns: A composite module that will compute the added value of the two child modules.
    public func add<T: Module>(_ lhs: T) -> some Module {
        AddModule(first: self, second: lhs)
    }
}

extension Module {
    /// Construct a module that adds this module and another module together.
    ///
    /// - Parameter fn: A closure to evaluate when computing the second module in the add operation.
    /// - Returns: A composite module that will compute the added value of the two child modules.
    public func add<T: Module>(_ fn: @escaping ModuleBuilder<T>) -> some Module {
        self.add(fn())
    }
}

extension Module {
    public func add(_ lhs: Double) -> some Module {
        self.add(ConstantModule(value: lhs))
    }
    public func add(_ lhs: Int) -> some Module {
        self.add(.init(lhs))
    }
}

public func + <T: Module, U: Module>(rhs: T, lhs: U) -> some Module {
    AddModule(first: rhs, second: lhs)
}
